{"version":3,"sources":["components/Pokemon.js","components/SearchField.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","props","urlSetting","search_keyword","searching","url","axios","get","then","response","data","console","log","setState","catch","err","error","state","this","preProps","errorMessage","types","display","isSuccess","length","message","undefined","map","type","index","key","name","sprites","src","other","dream_world","front_default","alt","id","stats","base_stat","className","Component","SearchField","handleKeyWordChange","event","word","target","value","toLowerCase","keyword","handleSearch","pre_keyword","send","htmlFor","placeholder","onChange","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58a95d4f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass Pokemon extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n        data: {},\r\n        error: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.searching();\r\n  }\r\n\r\n  componentDidUpdate(preProps){\r\n    if(this.props.search_keyword !== preProps.search_keyword){\r\n      this.setState({\r\n        error: {},\r\n      })\r\n      this.searching();\r\n    }\r\n  }\r\n\r\n\r\n  urlSetting = () => {\r\n    const url = `https://pokeapi.co/api/v2/pokemon/${this.props.search_keyword}`\r\n    return url;\r\n  }\r\n\r\n\r\n  searching = () => {\r\n    const url = this.urlSetting();\r\n    axios\r\n      .get(url)\r\n      .then((response) => {\r\n        const data = response.data;\r\n        // let titles = [], GIFsUrl = [];\r\n        // titles.push(data.title);\r\n        // GIFsUrl.push(data.images.original.url);\r\n\r\n    \r\n        console.log(data);\r\n        // console.log(GIFsUrl);\r\n\r\n\r\n        this.setState({ \r\n           data: data,\r\n        });\r\n      })\r\n     .catch((err) => {\r\n       console.log(err)\r\n       this.setState({\r\n         error: err,\r\n       })\r\n      });\r\n  };\r\n\r\n  render() {\r\n    let errorMessage;\r\n    let isSuccess = true;\r\n    if(this.state.error.length){\r\n      errorMessage = this.state.error.message;\r\n      isSuccess = false;\r\n    }\r\n\r\n    let types;\r\n    if(this.state.data.types === undefined)\r\n      types = \"\"\r\n    else{\r\n      types = (\r\n        <ul>\r\n          {this.state.data.types.map((type, index) =>{\r\n            return(\r\n              <li key={index}>\r\n                {type.type.name}\r\n              </li>\r\n            )\r\n          })}\r\n        </ul> \r\n      )\r\n    }\r\n\r\n    let display;\r\n    if(!isSuccess){\r\n      display = <p>No data</p>\r\n    }\r\n    else{\r\n      // let imageURL = this.state.data.sprites.front_default;\r\n      if(this.state.data.sprites === undefined){\r\n        display = \"loading...\"\r\n      }\r\n      else{\r\n        display = (\r\n          <div>\r\n            <img src={this.state.data.sprites.other.dream_world.front_default} alt={this.state.data.name}></img>\r\n            {/* <img src='https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/1.png' alt={this.state.data.name}></img> */}\r\n            <p>Index: {this.state.data.id}     /      Name: {this.state.data.name}</p>\r\n            <h3>Types:</h3>\r\n            {types}\r\n            <h3>Stats:</h3>\r\n            <ul>\r\n              <li>HP: {this.state.data.stats[0].base_stat}</li>\r\n              <li>Attack: {this.state.data.stats[1].base_stat}</li>\r\n              <li>Defense: {this.state.data.stats[2].base_stat}</li>\r\n              <li>Special-attack: {this.state.data.stats[3].base_stat}</li>\r\n              <li>Special-defense: {this.state.data.stats[4].base_stat}</li>\r\n              <li>Speed: {this.state.data.stats[5].base_stat}</li>\r\n            </ul>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    // let sequence = [...Array(this.state.title.length).keys()];\r\n    // //console.log(sequence);\r\n\r\n    // if (this.state.title.length === 0) {\r\n    //   display = <p>Loading...</p>;\r\n    // } \r\n    // else {    \r\n    //   const urlList = sequence.map((i) => {\r\n    //       return (\r\n    //           <li> \r\n    //               <div>\r\n    //                 <img src= {this.state.GIFurl[i]} alt={this.state.title[i]}/><br/>\r\n    //                   <h3>{this.state.title[i]}</h3>\r\n    //               </div>                 \r\n    //           </li>\r\n    //       )\r\n    //   });\r\n    //   display = (\r\n    //     <>\r\n    //       <ul>\r\n    //         {urlList}\r\n    //       </ul>\r\n    //     </>\r\n    //   );\r\n    // }\r\n\r\n    return (\r\n      <div className=\"GIFS\">   \r\n        {errorMessage}\r\n        {display}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Pokemon;","import React, { Component } from \"react\";\r\nimport Pokemon from \"./Pokemon\";\r\nclass SearchField extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n        keyword: '',\r\n        pre_keyword: '',\r\n        send: false,\r\n    };\r\n  }\r\n\r\n  handleKeyWordChange = (event) => {\r\n    let word = event.target.value.toLowerCase();\r\n    this.setState({ \r\n      keyword: word, \r\n    });\r\n  };\r\n\r\n  handleSearch = () => {\r\n    let word = this.state.keyword\r\n    this.setState({ \r\n      pre_keyword: word,\r\n      keyword: '',\r\n      send: true,\r\n    });\r\n  };\r\n\r\n\r\n    render() { \r\n      return (\r\n        <>\r\n        <div className=\"SearchField\">\r\n            <label htmlFor=\"KeyWord\">ID or Pokemon Name: </label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"KeyWord\"\r\n              placeholder=\"132 or ditto\"\r\n              value={this.state.keyword}\r\n              onChange={this.handleKeyWordChange}\r\n            />\r\n            <button onClick = {this.handleSearch}>Search</button>\r\n            <br/>\r\n            {this.state.send ?  \r\n              <Pokemon \r\n                search_keyword = {this.state.pre_keyword}\r\n              />  : \"loading\"}\r\n        </div>\r\n        </>\r\n      );\r\n    }\r\n}\r\n\r\nexport default SearchField;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SearchField from \"./components/SearchField\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Pokemon search</h1>\n        <SearchField />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}